{"version":3,"sources":["item.service.ts"],"names":["ItemService","http","this","baseUrl","prototype","getLatest","num","url","get","map","response","json","catch","handleError","getMostViewed","getRandom","id","Error","error","console","log","Observable_1","Observable","throw","__decorate","core_1","Injectable","exports_1"],"mappings":"66BAMAA,YAAA,WACI,QAAAA,aAAoBC,MAAAC,KAAAD,KAAAA,KACZC,KAAAC,QAAU,aAkCtB,MAhCIH,aAAAI,UAAAC,UAAA,SAAUC,KACN,GAAIC,KAAML,KAAKC,QAAU,YAEzB,OADW,OAAPG,MAAaC,KAAOD,KACjBJ,KAAKD,KAAKO,IAAID,KAAKE,IAAI,SAAAC,UAAY,MAAAA,UAASC,SAC9CC,MAAMV,KAAKW,cAGpBb,YAAAI,UAAAU,cAAA,SAAcR,KACV,GAAIC,KAAML,KAAKC,QAAU,gBAEzB,OADW,OAAPG,MAAaC,KAAOD,KACjBJ,KAAKD,KAAKO,IAAID,KAAKE,IAAI,SAAAC,UAAY,MAAAA,UAASC,SAC9CC,MAAMV,KAAKW,cAGpBb,YAAAI,UAAAW,UAAA,SAAUT,KACN,GAAIC,KAAML,KAAKC,QAAU,YAEzB,OADW,OAAPG,MAAaC,KAAOD,KACjBJ,KAAKD,KAAKO,IAAID,KAAKE,IAAI,SAAAC,UAAY,MAAAA,UAASC,SAC9CC,MAAMV,KAAKW,cAGpBb,YAAAI,UAAAI,IAAA,SAAIQ,IACA,GAAU,MAANA,GAAY,KAAM,IAAIC,OAAM,kBAChC,IAAIV,KAAML,KAAKC,QAAUa,EACzB,OAAOd,MAAKD,KAAKO,IAAID,KAAKE,IAAI,SAAAC,UAAY,MAAMA,UAASC,SACpDC,MAAMV,KAAKW,cAGZb,YAAAI,UAAAS,YAAR,SAAoBK,OAEhB,MADAC,SAAQC,IAAIF,OACLG,aAAAC,WAAWC,MAAML,MAAMP,OAAOO,OAAS,kBAnCtDlB,YAAAwB,YAACC,OAAAC,4EACDC,UAAA,cAAA3B","file":"item.service.js","sourcesContent":["import {Injectable} from '@angular/core';\r\nimport {Http, Response} from '@angular/http';\r\nimport {Observable} from 'rxjs/Observable';\r\nimport {Item} from './item';\r\n\r\n@Injectable()\r\nexport class ItemService {\r\n    constructor(private http: Http) { }\r\n    private baseUrl = 'api/items/';\r\n\r\n    getLatest(num?: number) {\r\n        var url = this.baseUrl + \"GetLatest/\";\r\n        if (num != null) url += num;\r\n        return this.http.get(url).map(response => response.json())\r\n            .catch(this.handleError);\r\n    }\r\n\r\n    getMostViewed(num?: number) {\r\n        var url = this.baseUrl + \"GetMostViewed/\";\r\n        if (num != null) url += num;\r\n        return this.http.get(url).map(response => response.json())\r\n            .catch(this.handleError);\r\n    }\r\n\r\n    getRandom(num?: number) {\r\n        var url = this.baseUrl + \"GetRandom/\";\r\n        if (num != null) url += num;\r\n        return this.http.get(url).map(response => response.json())\r\n            .catch(this.handleError);\r\n    }\r\n\r\n    get(id: number) {\r\n        if (id == null) throw new Error(\"id is requried.\");\r\n        var url = this.baseUrl + id;\r\n        return this.http.get(url).map(response => <Item>response.json())\r\n            .catch(this.handleError);\r\n    }\r\n\r\n    private handleError(error: Response) {\r\n        console.log(error);\r\n        return Observable.throw(error.json().error || \"Server Error.\");\r\n    }\r\n}"]}